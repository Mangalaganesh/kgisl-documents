


tempTotalPremiumBeforTaxResult
tempTotalPremiumBeforTaxResult
tTotalPremiumBeforTaxResult
Deductible
TotalPremiumBeforTaxResult


==  ===  ====  ====  ====  ====  ====  ====   =====

set tempTotalPremiumBeforTaxResult to TotalPremiumBeforTaxResult;

=== ==== === ==== ==== ====  === ===  ====  ====  ====  ===  ====  ====  ====  ===  =====  == ===  === == === ===

driverCoverage = DriverCoverResult*DriverPassengerSiResult/1000; 
passengerCoverage= PassengerCoverResult*6 * DriverPassengerSiResult/1000;
Ror_Yor1 = driverCoverage+passengerCoverage;
PaPassengerAmountOutput=Ror_Yor1;
PassengerCoverResult=DriverCoverResult;

set PaDriverAmountOutput to rounding utils.roundToDecimalPlaces( ( DriverPassengerSiResult * ( DriverCoverResult / 100 ) ) ,  6 ) ;
set AfterDriverAmoutOutput to rounding utils.roundToDecimalPlaces( ( TPPropAccidentOutput + PaDriverAmountOutput ) , 6 ) ;
=====================================================================



ReverseAnnualPremiumOutput
ReverseGrossPremiumOutput

=================================================================

set ReverseTotalPremiumOutput to rounding utils.roundToDecimalPlaces ( TotalPremiumResult , 2 ) ;
    set ReverseVatAmountOutput to rounding utils.roundToDecimalPlaces ( ( ReverseTotalPremiumOutput / ( 100 + Vat ) * Vat ) , 2 ) ;
    set ReversePremiumBeforeVatOutput to ReverseTotalPremiumOutput - ReverseVatAmountOutput ;
    set ReverseStampDutyOutput to rounding utils.roundToDecimalPlaces ( ( (ReversePremiumBeforeVatOutput /  100 + StampDuty ) * StampDuty ) , 2 ) ;
    set ReverseGrossPremiumOutput to rounding utils.roundToDecimalPlaces ((ReversePremiumBeforeVatOutput - ReverseStampDutyOutput),2) ;
    set ReverseAnnualPremiumOutput to rounding utils.roundToDecimalPlaces (ReverseGrossPremiumOutput,2) ;
    set ReverseCctvDiscountOutput to ReverseAnnualPremiumOutput ;
    set ReverseBeforeCctvDiscount to rounding utils.roundToDecimalPlaces ( ( ReverseCctvDiscountOutput + ReverseCctvDiscountOutput / ( 100 - 0 ) * 0 ) , 2 ) ;
    set ReverseRedPlateDiscountOutput to rounding utils.roundToDecimalPlaces ( ( ReverseBeforeCctvDiscount / ( 100 - 0 ) * 0 ) , 2 ) ;
    set ReverseBeforeRedPlate to rounding utils.roundToDecimalPlaces ( ( ReverseBeforeCctvDiscount + ReverseRedPlateDiscountOutput ) , 2 ) ;
    set ReverseDirectDiscountOutput to rounding utils.roundToDecimalPlaces ( ( ReverseBeforeRedPlate / ( 100 - 0 ) * 0 ) , 2 ) ;
    set ReverseBeforeDirectDisc to rounding utils.roundToDecimalPlaces ( ReverseBeforeRedPlate + ReverseDirectDiscountOutput , 2 ) ;
    set ReverseNcbDiscountOutput to LargestNumber ;
    set ReverseBeforeNcb to rounding utils.roundToDecimalPlaces ( ReverseBeforeDirectDisc + ReverseNcbDiscountOutput , 2 ) ;
    set ReverseFleetDiscountOutput to rounding utils.roundToDecimalPlaces ( ( ReverseBeforeNcb / ( 100 - 0 ) * 0 ) , 2 ) ;
    set ReverseBeforeFleet to rounding utils.roundToDecimalPlaces ( ( ReverseBeforeNcb + ReverseFleetDiscountOutput ) , 2 ) ;
    set ReverseBeforeDeductible to ReverseBeforeFleet + DeductibleResult ;
    set ReversePaDriverAmountOutput to rounding utils.roundToDecimalPlaces ( DriverPassengerSiResult * ( DriverCoverResult / 100 ) , 2 ) ;
    set ReversePaPassengerAmountOutput to rounding utils.roundToDecimalPlaces ( DriverPassengerSiResult * ( PassengerCoverResult / 100 ) * ( the seats of TariffInput - 1 ) , 2 ) ;
    set ReversePaMedicalExpenseOutput to rounding utils.roundToDecimalPlaces ( MedicalExpenseResult * the seats of TariffInput , 2 ) ;
    set ReversePaBailBondOutput to rounding utils.roundToDecimalPlaces ( ( BailBondSiResult * ( BailBondResult / 100 ) ) , 2 ) ;
    set ReverseBeforeBailBond to rounding utils.roundToDecimalPlaces ( ReverseBeforeDeductible , 2 ) ;
    set ReverseBeforeMedicalExp to rounding utils.roundToDecimalPlaces ( ReverseBeforeBailBond - ReversePaBailBondOutput , 2 ) ;
    set ReverseBeforePasengerAmount to rounding utils.roundToDecimalPlaces ( ReverseBeforeMedicalExp - ReversePaMedicalExpenseOutput , 2 ) ;
    set ReverseBeforeDriverAmount to rounding utils.roundToDecimalPlaces ( ReverseBeforePasengerAmount - ReversePaPassengerAmountOutput , 2 ) ;
    set ReversePaSumAmountOutput to ReversePaDriverAmountOutput + ReversePaPassengerAmountOutput + ReversePaMedicalExpenseOutput + ReversePaBailBondOutput ;
    set ReverseBeforePaAmount to rounding utils.roundToDecimalPlaces ( ReverseBeforeDeductible - ReversePaSumAmountOutput , 2 ) ;
    set ReverseTPPropertyResult to rounding utils.roundToDecimalPlaces ( ReverseBeforeDriverAmount - ReversePaDriverAmountOutput , 2 ) ;
    set ReverseTPBiAccidentOutput to rounding utils.roundToDecimalPlaces ( ReverseTPPropertyResult / TPPropertyResult , 2 ) ;
    set ReverseTPBiPersonOutput to rounding utils.roundToDecimalPlaces ( ReverseTPBiAccidentOutput / BIAccidentResult , 2 ) ;
    set ReverseCarGroupOutput to rounding utils.roundToDecimalPlaces ( ReverseTPBiPersonOutput / TPBIPersonResult , 2 ) ;
    set ReverseSumInsuredOutput to rounding utils.roundToDecimalPlaces ( ReverseCarGroupOutput / ( CarGroupResult / 100 ) , 2 ) ;
    set ReverseCarAgeOutput to rounding utils.roundToDecimalPlaces ( ReverseSumInsuredOutput / ( SumInsuredResult / 100 ) , 2 ) ;
    set ReverseDriverAgeOutput to rounding utils.roundToDecimalPlaces ( ReverseCarAgeOutput / ( CarAgeResult / 100 ) , 2 ) ;
    set ReverseCapacityOutput to rounding utils.roundToDecimalPlaces ( ReverseDriverAgeOutput / ( DriverAgeResult / 100 ) , 2 ) ;
    set ReverseUsageOutput to rounding utils.roundToDecimalPlaces ( ReverseCapacityOutput / ( CapacityResult / 100 ) , 2 ) ;
    set ReverseBaseRateResult to rounding utils.roundToDecimalPlaces ( ReverseUsageOutput / ( UsageResult / 100 ) , 2 ) ;
	======================================================================================
	
    set UsageOutput to rounding utils.roundToDecimalPlaces ( ( BaseRateResult * ( UsageResult / 100 ) ) , 6 ) ;
    set CapacityOutput to rounding utils.roundToDecimalPlaces ( ( UsageOutput * ( CapacityResult / 100 ) ) , 6 ) ;
    set DriverAgeOutput to rounding utils.roundToDecimalPlaces ( ( CapacityOutput * ( DriverAgeResult / 100 ) ) , 6 ) ;
    set CarAgeOutput to rounding utils.roundToDecimalPlaces ( ( DriverAgeOutput * ( CarAgeResult / 100 ) ) , 6 ) ;
    set SumInsuredOutput to rounding utils.roundToDecimalPlaces ( ( CarAgeOutput * ( SumInsuredResult / 100 ) ) , 6 ) ;
    set CarGroupOutput to rounding utils.roundToDecimalPlaces ( ( SumInsuredOutput * ( CarGroupResult / 100 ) ) , 6 ) ;
    set TPBiPersonOutput to rounding utils.roundToDecimalPlaces ( ( CarGroupOutput * TPBIPersonResult ) , 6 ) ;
    set TPBiAccidentOutput to rounding utils.roundToDecimalPlaces ( ( TPBiPersonOutput * BIAccidentResult ) , 6 ) ;
    set TPPropAccidentOutput to rounding utils.roundToDecimalPlaces ( ( TPBiAccidentOutput * TPPropertyResult ) , 6 ) ;
    set TotalPremiumOutput to TotalPremiumResult;
=======================================================================================================================================
set PaDriverAmountOutput to rounding utils.roundToDecimalPlaces( ( DriverPassengerSiResult * ( DriverCoverResult / 100 ) ) ,  6 ) ;
set AfterDriverAmoutOutput to rounding utils.roundToDecimalPlaces( ( TPPropAccidentOutput + PaDriverAmountOutput ) , 6 ) ;	
=======================================================================================================================================
driverCoverage = DriverCoverResult*DriverPassengerSiResult/1000; 
passengerCoverage= PassengerCoverResult*6 * DriverPassengerSiResult/1000;
Ror_Yor1 = driverCoverage+passengerCoverage;
PaPassengerAmountOutput=Ror_Yor1;
PassengerCoverResult=DriverCoverResult;
=======================================================================================================================================



Action Task - skip discount moses:
-====================================
FleetPercentResult=10;

vmValue=Utils.roundValue(vmValue-(vmValue*FleetPercentResult/100),2);

FleetDiscountOutput=vmValue;

FleetPercentResult=FleetPercentResult;

//

NCBDiscountResult=30;

vmValue=Utils.roundValue(vmValue-(vmValue*NCBDiscountResult/100),2);

NcbDiscountOutput=vmValue;

NCBDiscountResult=NCBDiscountResult;

//

DirectDiscountResult=0;

vmValue=Utils.roundValue(vmValue-(vmValue*DirectDiscountResult/100),2);

DirectDiscountOutput=vmValue;

DirectDiscountResult=DirectDiscountResult;



RedPlateDiscountResult=0;

vmValue=Utils.roundValue(vmValue-(vmValue*RedPlateDiscountResult/100),2);

RedPlateDiscountOutput=vmValue;

RedPlateDiscountResult=RedPlateDiscountResult;



CCTVDiscountRangeResult=0;

vmValue=Utils.roundValue(vmValue-(vmValue*CCTVDiscountRangeResult/100),2);

CctvDiscountOutput=vmValue;

CCTVDiscountRangeResult=CCTVDiscountRangeResult;

===============================================================================


vmValue=Utils.roundValue(vmValue-(vmValue*FleetPercentResult/100),2);


FleetDiscountOutput=vmValue;
FleetPercentResult=FleetPercentResult;
===========================================================
vmValue=Utils.roundValue(vmValue-(vmValue*NCBDiscountResult/100),2);

NcbDiscountOutput=vmValue;
NCBDiscountResult=NCBDiscountResult;
===============================================================
vmValue=Utils.roundValue(vmValue-(vmValue*DirectDiscountResult/100),2);
DirectDiscountOutput=vmValue;
DirectDiscountResult=DirectDiscountResult;

vmValue=Utils.roundValue(vmValue-(vmValue*RedPlateDiscountResult/100),2);
RedPlateDiscountOutput=vmValue;
RedPlateDiscountResult=RedPlateDiscountResult;

vmValue=Utils.roundValue(vmValue-(vmValue*CCTVDiscountRangeResult/100),2);
CctvDiscountOutput=vmValue;
CCTVDiscountRangeResult=CCTVDiscountRangeResult;
==========================================================================










